#!/usr/bin/env python3

import argparse
import os
import re
import pprint as pp
import sys
import certifi

from kbr import file_utils
from tabulate import tabulate
import json
import time

from bioblend.galaxy import GalaxyInstance

sys.path.append(".")

import kbr.config_utils as config_utils
import kbr.log_utils as logger
import kbr.mq_utils as mq_utils
import kbr.version_utils as version_utils
import kbr.args_utils as args_utils
import kbr.string_utils as string_utils
import kbr.timedate_utils as timedate_utils
import kbr.email_utils as email_utils

import nels_galaxy_api.api_requests as api_requests
import nels_galaxy_api.utils as nga_utils
import nels_galaxy_api.front as nga_front

verbose = False
version = version_utils.as_string()

mq = mq_utils.Mq()
galaxy_config = None
nels_storage_client_key = None
nels_storage_client_secret = None
nels_storage_url = None

# Command line client for manually executing imports/exports, listing histories and others.

def init(config_file: str) -> {}:
    config = config_utils.readin_config_file(config_file)
    logger.info("init from config ")

    master_url = config['master_url'].rstrip("/")

    master_api = api_requests.ApiRequests(master_url, config['key'])
    config['master_api'] = master_api

    global galaxy_config
    galaxy_config = config['galaxy_config']

    mq.connect(uri=config['mq_uri'])

    tmp_instances = {}

    for iid in config['instances']:
        instance = config['instances'][iid]

        if 'active' not in instance or not instance['active']:
            continue

        instance['api'] = api_requests.ApiRequests(instance['nga_url'].rstrip("/"), instance['nga_key'])
        instance['id'] = iid
        tmp_instances[iid] = instance
        tmp_instances[instance['name']] = instance

    config['instances'] = tmp_instances

    return config


def ping_hosts(config: {}):
    pings = []

    for instance_id in config['instances']:
        if config['instances'][instance_id]['name'] == instance_id:
            continue

        instance = config['instances'][instance_id]
        ping = {'name': instance['name'], 'reachable': False, 'secure reachable': False, 'api-version': 'NA',
                'disk free': 'NA', 'bioblend': False}
        try:
            base_info = instance['api'].get_base()
            ping['api-version'] = base_info['version']
            ping['reachable'] = True
            disk_info = instance['api'].get_info()
            ping['disk free'] = f"{disk_info['perc_free']:>3.2f}% ({disk_info['free_gb']:>7.2f} GB)"
            ping['secure reachable'] = True
        except Exception as e:
            logger.debug(f'Could not fetch all information for {instance["name"]}: {e}')
            pass

        try:
            gi = GalaxyInstance(instance['url'], key=instance['api_key'], verify=certifi.where())
            gi.histories.hl = gi.histories.get_histories()
            ping['bioblend'] = True
        except Exception as e:
            logger.debug(f'Could not fetch all information for {instance["name"]}: {e}')

        pings.append(ping)

    print(tabulate(pings, headers="keys", tablefmt="psql"))


def list_users(config: {}, commands: []= None):

    instance_name = args_utils.get_or_default(commands, "")
    timerange = args_utils.get_or_default(commands, "")
    time_delta = nga_utils.timedelta_to_epoc(timerange)


    if instance_name == "help":
        print("help: list users [instance-name [timerange]]")
        return


    if instance_name:
        data = nga_front.get_users(config, instance_name, time_delta=time_delta)
    elif verbose:
        data = nga_front.get_users(config)
    else:
        data = nga_front.get_users(config, summary=True)

    print(tabulate(data, headers="keys", tablefmt="psql"))

    print(f"entries: {len(data)}")


def list_histories(config: {}, instance_name: str = None, user_email: str = None):
    if instance_name == "help":
        print("help: histories [instance-name] [user-email]")
        return

    if user_email:
        data = nga_front.get_histories(config, instance_name, user_email)
    elif verbose:
        data = nga_front.get_histories(config, instance_name)
    else:
        data = nga_front.get_histories(config, instance_name, summary=True)

    print(tabulate(data, headers="keys", tablefmt="psql"))
    print(f"entries: {len(data)}")
    return


def list_exports(config: {}, instance_name: str = None, user_email: str = None):
    if instance_name == "help":
        print("help: exports [instance-name] [user-email]")
        return

    if user_email:
        data = nga_front.get_exports(config, instance_name, user_email, full=verbose)
    elif verbose:
        data = nga_front.get_exports(config, instance_name, full=verbose)
    else:
        data = nga_front.get_exports(config, instance_name, summary=True)

    print(tabulate(data, headers="keys", tablefmt="psql"))
    print(f"entries: {len(data)}")
    return


def list_intersect(config: {}, instance_name: str = None, user_email: str = None):
    if instance_name == "help":
        print("help: exports [instance-name] [user-email]")
        return

    export_requests = nga_front.get_export_requests(config, 0)

    instance_exports = {}
    user_instance_exports = {}
    exports_list = []
    for export_request in export_requests:
        hist_id = export_request['history_id']
        instance = export_request['instance']
        user = export_request['user_email']

        if instance not in instance_exports:
            instance_exports[instance] = {}
            user_instance_exports[instance] = {}
        instance_exports[instance][hist_id] = 1

        if user not in user_instance_exports[instance]:
            user_instance_exports[instance][user] = {}

        user_instance_exports[instance][user][hist_id] = 1
        exports_list.append(hist_id)

    if user_email or verbose:
        histories = nga_front.get_histories(config, instance_name, user_email)

        for history in histories:
            history['exported to NeLS'] = False
            if history['id'] in exports_list:
                history['exported to NeLS'] = True
    else:
        histories = nga_front.get_histories(config, instance_name, summary=True)
        summary = {}

        for history in histories:
            instance = history['name']
            user = history['user']
            history['exported to NeLS'] = 0

            if instance not in summary:
                summary[instance] = {"histories": 0, 'exported': 0}
            summary[instance]['histories'] += 1

            if instance in user_instance_exports and user in user_instance_exports[instance]:
                history['exported to NeLS'] = len(user_instance_exports[instance][user].values())
                summary[instance]['exported'] += 1

        if instance_name is None:
            histories = []
            for instance in summary:
                histories.append({'name': instance,
                                  'histories': summary[instance]['histories'],
                                  'exported to NeLS': summary[instance]['exported']})

    print(tabulate(histories, headers="keys", tablefmt="psql"))
    return


def list_imports(config: {}, user_email: str = None):
    if user_email == "help":
        print("help: imports <user-email>")
        return

    if user_email:
        data = nga_front.get_imports(config, user_email, full=verbose)
    elif verbose:
        data = nga_front.get_imports(config, full=verbose)
    else:
        data = nga_front.get_imports(config, summary=True)

    print(tabulate(data, headers="keys", tablefmt="psql"))
    return


def list_export_requests(config: {}, user: str = None, instance: str = None):
    if user is not None and instance is not None:
        requests = config['master_api'].get_user_instance_exports(user, instance)

    elif instance is not None:
        requests = config['master_api'].get_instance_exports(instance)
    elif user is not None:
        requests = config['master_api'].get_user_exports(user)
    else:
        requests = config['master_api'].get_exports()

    for request in requests:

        request['update_time'] = nga_utils.readable_date(request['update_time'])
        request['create_time'] = nga_utils.readable_date(request['create_time'])

        if not verbose:
            for k in ['history_id', 'export_id', 'tmpfile', 'nels_id', 'destination']:
                del request[k]

    requests = sorted(requests, key=lambda x: (x['create_time'], x['update_time']))

    print(tabulate(requests, headers="keys", tablefmt="psql"))


def list_import_requests(config: {}, user: str = None):
    if user is not None:
        requests = config['master_api'].get_user_imports(user)
    else:
        requests = config['master_api'].get_imports()

    for request in requests:

        user = config['master_api'].get_user(request['user_id'])
        if len(user):
            request['user_email'] = user['email']
        else:
            request['user_email'] = 'NA'

        request['update_time'] = nga_utils.readable_date(request['update_time'])
        request['create_time'] = nga_utils.readable_date(request['create_time'])

        if not verbose:
            for k in ['nels_id', 'source', 'user_id', 'tmpfile', 'import_id']:
                del request[k]

    requests = sorted(requests, key=lambda x: (x['create_time'], x['update_time']))

    print(tabulate(requests, headers="keys", tablefmt="psql"))


def list_jobs(config: {}, commands=[]):
    time_delta = args_utils.get_or_default(commands, "60m")
    user_id = args_utils.get_or_default(commands, None)

    jobs = config['master_api'].get_jobs({'time_delta': time_delta, 'user_id': user_id})

    if verbose:
        print(tabulate(jobs, tablefmt='psql'))
        return

    summary = {'users': {}, 'tools': {}, 'states': {}}
    for job in jobs:
        summary['users'][job['email']] = summary['users'].get(job['email'], 0) + 1
        summary['tools'][job['tool_id']] = summary['tools'].get(job['tool_id'], 0) + 1
        summary['states'][job['state']] = summary['states'].get(job['state'], 0) + 1

    summary['jobs'] = len(jobs)
    summary['users'] = summary['users']
    summary['tools'] = summary['tools']

    print(f"Usage of usegalaxy for the last {time_delta}")
    print(
        f"{len(summary['users'].keys())} users ran {summary['jobs']} jobs using {len(summary['tools'].keys())} different tools\n")

    print("\ntop users:")
    lim = 10
    users = [['user', 'jobs']]
    for user in sorted(summary['users'].keys(), key=lambda x: summary['users'][x], reverse=True):
        users.append([user, summary['users'][user]])
    print(tabulate(users[:10], headers='firstrow', tablefmt='psql'))

    print("\ntop tools:")
    lim = 10
    tools = [['tool', 'jobs']]
    for tool in sorted(summary['tools'].keys(), key=lambda x: summary['tools'][x], reverse=True):
        tools.append([tool, summary['tools'][tool]])

    print(tabulate(tools[:10], headers='firstrow', tablefmt='psql'))

    print("\njob states:")
    states = [['state', 'count']]
    for state in sorted(summary['states'].keys(), key=lambda x: summary['states'][x], reverse=True):
        states.append([state, summary['states'][state]])
    print(tabulate(states, headers='firstrow', tablefmt='psql'))


def log_requests(config, commands):
    if len(commands) == 0:
        commands.append('all')

    sub_command = commands.pop(0)

    if sub_command == 'all':
        pass
    elif sub_command == 'request':
        pass
    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("==========================")
        print("log: <all> ")
        print("log: request [request-id] ")


def export_subcommand(config: {}, commands=[]):
    if len(commands) == 0:
        commands.append('all')

    sub_command = commands.pop(0)

    if sub_command == 'instance':
        instance_name = args_utils.get_or_fail(commands, "Instance name is required")
        user_email = args_utils.get_or_default(commands, None)
        instance_id = config['instances'][instance_name]['id']

        list_export_requests(config, user_email, instance_id)

    elif sub_command == 'user':
        user_email = args_utils.get_or_fail(commands, "user email is required")
        instance = args_utils.get_or_default(commands, None)
        if instance is not None:
            instance = config['instances'][instance]['id']
        list_export_requests(config, user_email, instance)
    elif sub_command == 'all':
        list_export_requests(config)
    elif sub_command == 'log':
        log_requests(config, commands)
    elif sub_command == 'queue':
        queue_job(config, commands, tpe='export')
    elif sub_command == 'requeue':
        requeue_job(config, commands, 'export')
        sys.exit()
    elif sub_command == 'restate':
        restate_job(config, commands, 'export')
        sys.exit()
    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("==========================")
        print("requests: requests [all] ")
        print("requests: requests user user-email [instance]")
        print("requests: requests instance instance-name [email]")

        print("requests: requests queue ID [new-state]")
        print("requests: requests requeue ID new-state")
        print("requests: requests restate ID new-state")


def import_subcommand(config: {}, commands=[]):
    if len(commands) == 0:
        commands.append('all')

    sub_command = commands.pop(0)

    if sub_command == 'user':
        user_email = args_utils.get_or_fail(commands, "user email is required")
        list_import_requests(config, user_email)
    elif sub_command == 'all':
        list_import_requests(config)
    elif sub_command == 'log':
        log_requests(config, commands)
    elif sub_command == 'queue':
        queue_job(config, commands, tpe='import')
    elif sub_command == 'requeue':
        requeue_job(config, commands, 'import')
    elif sub_command == 'restate':
        restate_job(config, commands, 'import')
    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("==========================")
        print("requests: imports [all] ")
        print("requests: imports user-email")

        print("requests: imports queue ID [new-state]")
        print("requests: imports requeue ID new-state")
        print("requests: imports restate ID new-state")


def submit_mq_job(tracker_id: int, tpe: str) -> None:
    payload = {'tracker_id': tracker_id, "type": tpe}

    if mq is None:
        logger.error('MQ not configured, cannot send message')
        return

    mq.publish(body=json.dumps(payload))


def queue_job(config: {}, commands=[], tpe: str = None):
    if len(commands) == 0:
        print(f"requests: {tpe}s queue job-id [new-state]")
        return

    job_id = args_utils.get_or_fail(commands, "Job id is required")
    state = args_utils.get_or_default(commands, None)

    if tpe == 'export':
        tracker = config['master_api'].get_export(job_id)
    elif tpe == 'import':
        tracker = config['master_api'].get_import(job_id)
    else:
        raise RuntimeError(f'unknown job type {tpe}')

    if tracker is None:
        print(f"Unknown job id {job_id}")
        sys.exit(1)

    del tracker['id']
    del tracker['create_time']
    del tracker['update_time']

    if state is not None and state != tracker['state']:
        if tpe == 'export':
            config['master_api'].update_export(job_id, {'state': state})
        elif tpe == 'import':
            config['master_api'].update_import(job_id, {'state': state})
    else:
        state = tracker['state']

    submit_mq_job(tracker_id=job_id, tpe=tpe)


def requeue_job(config: {}, commands=[], tpe: str = None):
    if len(commands) == 0 or commands[0] == 'help':
        print("requests: requeue job-id new-state")
        return

    job_id = args_utils.get_or_fail(commands, "Job id is required")
    state = args_utils.get_or_fail(commands, "New job state is required")

    if tpe == 'export':
        tracker = config['master_api'].requeue_export(job_id, {'state': state})
    elif tpe == 'import':
        tracker = config['master_api'].requeue_import(job_id, {'state': state})
    else:
        raise RuntimeError(f"Unknown type {tpe}, allowed are import and export")


def restate_job(config: {}, commands=[], tpe: str = None):
    if len(commands) == 0 or commands[0] == 'help':
        print("requests: queue job-id [new-state]")
        return

    job_id = args_utils.get_or_fail(commands, "Job id is required")
    state = args_utils.get_or_fail(commands, "New job state is required")

    if tpe == 'export':
        config['master_api'].update_export(job_id, {'state': state})
    elif tpe == 'import':
        config['master_api'].update_import(job_id, {'state': state})
    else:
        raise RuntimeError(f"Unknown type {tpe}, allowed are import and export")


def galaxy_info_subcommand(config, commands):
    if len(commands) == 0:
        commands.append('help')

    sub_command = commands.pop(0)

    if sub_command == 'users':
        list_users(config, commands)
        return
    elif sub_command == 'histories':
        list_histories(config, instance_name=args_utils.get_or_default(commands, None),
                       user_email=args_utils.get_or_default(commands, None))
        return
    elif sub_command == 'exports':
        list_exports(config, instance_name=args_utils.get_or_default(commands, None),
                     user_email=args_utils.get_or_default(commands, None))
        return
    elif sub_command == 'intersect':
        list_intersect(config, instance_name=args_utils.get_or_default(commands, None),
                       user_email=args_utils.get_or_default(commands, None))
        return
    elif sub_command == 'jobs':
        list_jobs(config, commands)
        return
    elif sub_command == 'imports':
        list_imports(config, user_email=args_utils.get_or_default(commands, None))
        return
    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("==========================")
        print("list: users [instance] ")
        print("list: histories [instance] [user]")
        print("list: exports [instance] [user]")
        print("list: imports [user]")
        print("list: jobs  [time (1m, 3d, 1m, 2w)] <user>")
        print("list: intersect [instance] [user] ")


def nga_errors(config, commands):
    email = None
    if len(commands) and commands[0] == 'email':
        commands.pop(0)
        email = args_utils.get_or_fail(commands, 'email not provided')

    timerange = args_utils.get_or_default(commands, "")
    time_delta = nga_utils.timedelta_to_epoc(timerange)

    errors = [['id', 'instance', 'user', 'state', 'update time', 'type']]

    export_requests = nga_front.get_export_requests(config, time_delta)
    for request in export_requests:
        if 'error' in request['state']:
            errors.append([request['id'], request['instance'], request['user_email'], request['state'],
                           nga_utils.readable_date(request['update_time']), 'export'])

    import_requests = nga_front.get_import_requests(config, time_delta)
    for request in import_requests:
        if 'error' in request['state']:
            errors.append([request['id'], ' ', request['user_email'], request['state'],
                           nga_utils.readable_date(request['update_time']), 'import'])

    if len(errors) > 1:
        errors = tabulate(errors, headers="firstrow", tablefmt="psql")
        if email is not None and errors != "":
            email_utils.send_email("admin@usegalaxy.no",
                                   email,
                                   f"[NGA-ERRORs: list of errors from the last {timerange}",
                                   errors, )
        else:
            print(errors)


def nga_stuck_jobs(config, commands):
    timerange = args_utils.get_or_default(commands, "")
    time_delta = nga_utils.timedelta_to_epoc(timerange)

    errors = [['id', 'instance', 'user', 'state', 'create time', 'type']]

    export_requests = nga_front.get_export_requests(config, time_delta)
    for request in export_requests:
        if request['update_time'] == '' or request['update_time'] is None:
            errors.append([request['id'], request['instance'],
                           request['user_email'], request['state'],
                           nga_utils.readable_date(request['create_time']), 'export'])

    import_requests = nga_front.get_import_requests(config, time_delta)
    for request in import_requests:
        if request['update_time'] == '' or request['update_time'] is None:
            errors.append([request['id'], ' ',
                           request['user_email'], request['state'],
                           nga_utils.readable_date(request['create_time']), 'import'])

    if len(errors) > 1:
        errors = tabulate(errors, headers="firstrow", tablefmt="psql")
        print(errors)


def nga_unstick_jobs(config, commands):
    timerange = args_utils.get_or_default(commands, "")
    time_delta = nga_utils.timedelta_to_epoc(timerange)

    export_requests = nga_front.get_export_requests(config, time_delta)
    for request in export_requests:
        if request['update_time'] == '' or request['update_time'] is None:
            queue_job(config, [request['id']], tpe="export")
            if verbose:
                print(f"Unstuck export job {request['id']} for {request['user_email']} on {request['instance']}")

    import_requests = nga_front.get_import_requests(config, time_delta)
    for request in import_requests:
        if request['update_time'] == '' or request['update_time'] is None:
            queue_job(config, [request['id']], tpe="import")
            if verbose:
                print(f"Unstuck import job {request['id']} for {request['user_email']} on {request['instance']}")


def list_tmpfiles(config, commands):
    delete_files = False
    if len(commands) and commands[0] == 'del':
        commands.pop(0)
        delete_files = True

    del_states = commands

    tfiles = [["filename", "size", "state"]]

    for request in config['master_api'].get_exports():
        if request['tmpfile'] and os.path.isfile(request['tmpfile']):
            if not del_states or (del_states and request['state'] in del_states):
                tfiles.append([request['tmpfile'], file_utils.size(request['tmpfile']), request['state']])
                if verbose:
                    print(f"deleting file {request['tmpfile']}")
                os.unlink(request['tmpfile'])

    if not delete_files and len(tfiles) > 1:
        print(tabulate(tfiles, headers="firstrow", tablefmt="psql"))


def galaxy_crypt(value: any, tpe: str) -> None:
    global galaxy_config
    galaxy_config = config_utils.readin_config_file(galaxy_config)
    if 'id_secret' not in galaxy_config['galaxy']:
        id_secret = "USING THE DEFAULT IS NOT SECURE!"
    else:
        id_secret = galaxy_config['galaxy']['id_secret']
    nga_utils.init(id_secret)
    if tpe == 'decrypt':
        print(f"{value}\t{nga_utils.decrypt_value(value)}")
    elif tpe == 'encrypt':
        print(f"{value}\t{nga_utils.encrypt_value(value)}")
    else:
        raise RuntimeError(f'Unknown id manipulation {tpe}')


def nels_ssh_info(config, commands):
    nels_id = args_utils.get_or_fail(commands, "Nels-id is required")
    ssh_info = nga_utils.get_ssh_credential(config, nels_id, tmpfile=False)
    print(
        f"cmd for NeLS-id {nels_id} user: ssh/scp -i {ssh_info['key_file']} {ssh_info['username']}@{ssh_info['hostname']}")
    print(f"Remember to delete {ssh_info['key_file']} file when done!")


def utils_subcommand(config, commands):
    if len(commands) == 0:
        commands.append('help')

    sub_command = commands.pop(0)

    if sub_command == 'tmpfiles':
        list_tmpfiles(config, commands)
        return
    elif sub_command == 'errors':
        nga_errors(config, commands)
        return
    elif sub_command == 'stuck':
        nga_stuck_jobs(config, commands)
        return
    elif sub_command == 'unstick':
        nga_unstick_jobs(config, commands)
        return
    elif sub_command == 'queue-flush':
        mq.flush()
        return
    elif sub_command == 'queue-size':
        print(f"Currently {mq.queue_length('default')} messages in the MQueue")
        return
    elif sub_command == 'decrypt':
        value = args_utils.get_or_fail(commands, "value is required")
        galaxy_crypt(value, 'decrypt')
    elif sub_command == 'encrypt':
        value = args_utils.get_or_fail(commands, "value is required")
        galaxy_crypt(value, 'encrypt')
    elif sub_command == 'nels-ssh-info':
        nels_ssh_info(config, commands)


    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("==========================")
        print("utils: tmpfiles")
        print("utils: tmpfiles del")
        print("utils: stuck <1d, 2h, 3w>")
        print("utils: errors <1d, 2h, 3w>")
        print("utils: errors email [email add] <1d, 2h, 3w>")
        print("utils: queue-flush")
        print("utils: queue-size")
        print("utils: decrypt [value]")
        print("utils: encrypt [value]")
        print("utils: nels-ssh-info [nels-id] ")


#        print("utils: exports [instance] [user]")


def export(config, commands):
    if len(commands) == 0:
        commands.append('help')

    sub_command = commands.pop(0)

    if sub_command == 'users':
        list_users(config, args_utils.get_or_default(commands, None))
        return
    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("==========================")
        print("export: single [nels-id] [user-email] [instance] [history-id]")
        print("export: user [nels-id] [user-email] <instance> Instance can be: all>")


def main():
    commands = ['ping', 'list', 'exports', 'imports', 'utils', 'help']

    parser = argparse.ArgumentParser(description=f'nga_cli: command line tool for the NGA ({version})')

    parser.add_argument('-c', '--config', help="NGA config file, or set env NGA_CONF",
                        default=args_utils.get_env_var('NGA_CONF'))
    parser.add_argument('-v', '--verbose', default=0, action="count", help="Increase the verbosity of logging output")
    parser.add_argument('command', nargs='*', help="{}".format(",".join(commands)))

    args = parser.parse_args()

    logger.init(name=f'nga_cli')
    logger.set_log_level(args.verbose)
    logger.info(f'nga-cli (v:{version})')

    if args.config is None:
        parser.print_usage()
        sys.exit(1)

    global verbose
    verbose = args.verbose

    config = init(args.config)

    args_utils.min_count(1, len(args.command),
                         msg="nga-cli takes one of the following commands: {}".format(string_utils.comma_sep(commands)))

    command = args.command.pop(0)
    if command == 'ping':
        ping_hosts(config)
        sys.exit()
        sys.exit()
    elif command == 'list':
        galaxy_info_subcommand(config, args.command)
    elif command == 'exports':
        export_subcommand(config, args.command)
        sys.exit()
    elif command == 'imports':
        import_subcommand(config, args.command)
        sys.exit()
    elif command == 'utils':
        utils_subcommand(config, args.command)
        sys.exit()
    #    elif command == 'export':
    #        export(config, args.command)
    #        sys.exit()

    else:
        print("The tool support the following commands: {}\n".format(string_utils.comma_sep(commands)))
        parser.print_usage()
        parser.add_argument('command', nargs='+', help="{}".format(",".join(commands)))
        sys.exit(1)


if __name__ == "__main__":
    main()

# class ExportBulk ( Export ):
#
#     def endpoint(self):
#         return("/export/")
#
#     def post(self, instance:str, user:str=None):
#         #        args =  self.arguments()
#         #post_values =  self.post_values()
#         nels_id = self.get_body_argument("nelsId", default=None)
#         location = self.get_body_argument("selectedFiles", default=None)
#         # This is a usegalaxy instance, get the information from the session
#
#         #This will not work!, need to use the CLI for this as the token will be wrong
#         histories = requests.get_user_histories(instance, user_id)
#         for history in histories:
#             try:
#                 self._register_export(instance, user, history['id'], nels_id, location)
#                 self.send_response_204()
#             except:
#                 self.send_response_400()
